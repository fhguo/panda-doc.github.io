import{_ as t,o as h,c as p,k as s,a as i,t as l,R as a}from"./chunks/framework.uQiAom7V.js";const T=JSON.parse('{"title":"AngularJS基础","description":"","frontmatter":{},"headers":[],"relativePath":"note/Angularjs.md","filePath":"note/Angularjs.md","lastUpdated":1715148599000}'),k={name:"note/Angularjs.md"},e=a(`<h1 id="angularjs基础" tabindex="-1">AngularJS基础 <a class="header-anchor" href="#angularjs基础" aria-label="Permalink to &quot;AngularJS基础&quot;">​</a></h1><h2 id="_1-angularjs是什么" tabindex="-1">1. AngularJS是什么 <a class="header-anchor" href="#_1-angularjs是什么" aria-label="Permalink to &quot;1. AngularJS是什么&quot;">​</a></h2><p>AngularJS是一个开源的JavaScript框架，由Google开发和维护，用于构建Web应用程序。它是一种用于前端开发的MVC（模型-视图-控制器）框架，旨在使开发者能够更轻松地构建复杂的单页Web应用程序（SPA）。</p><p>以下是AngularJS的一些关键特点和概念：</p><ol><li><p>MVC架构：AngularJS采用MVC架构，它将应用程序分为三个主要部分：</p><ul><li>模型（Model）：用于表示应用程序的数据和业务逻辑。</li><li>视图（View）：用户界面的呈现部分，通常使用HTML模板来定义。</li><li>控制器（Controller）：用于处理用户输入、管理模型和视图之间的交互。</li></ul></li><li><p>双向数据绑定：AngularJS引入了双向数据绑定的概念，这意味着当模型的状态发生变化时，视图会自动更新，反之亦然。这大大简化了处理用户界面和数据同步的任务。</p></li><li><p>指令（Directives）：AngularJS引入了指令，允许开发者通过自定义HTML标签和属性来扩展HTML语言。例如，ng-model指令用于双向数据绑定，ng-repeat用于重复元素，ng-click用于处理点击事件等。</p></li><li><p>依赖注入（Dependency Injection）：AngularJS提供了强大的依赖注入机制，使得组件之间的协作和测试变得更加容易。通过依赖注入，你可以轻松地管理组件之间的依赖关系。</p></li><li><p>模块化：AngularJS支持将应用程序拆分为模块，每个模块都可以包含控制器、服务、过滤器等组件。这有助于代码的组织和维护。</p></li><li><p>服务（Services）：AngularJS提供了一种用于封装可复用逻辑的机制，称为服务。服务可以用于处理数据、HTTP请求、身份验证等任务，并可以通过依赖注入在不同部分之间共享。</p></li><li><p>路由（Routing）：虽然AngularJS核心库中没有提供路由功能，但可以使用第三方库（如UI Router）来实现单页应用程序的路由管理，以便在不同视图之间进行导航。</p></li></ol><p>需要注意的是，虽然AngularJS在过去非常流行，但自从Angular 2发布以来，Angular框架经历了重大变化，并且不再向后兼容AngularJS。</p><h2 id="_2-常用的指令" tabindex="-1">2. 常用的指令 <a class="header-anchor" href="#_2-常用的指令" aria-label="Permalink to &quot;2. 常用的指令&quot;">​</a></h2><p>AngularJS是一个JavaScript框架，提供了许多内置指令来扩展HTML的功能。以下是一些常用的AngularJS指令及其示例：</p><ol><li><p><strong>ng-app</strong>：定义AngularJS应用程序的根元素。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myApp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 应用程序内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-controller</strong>：定义控制器，控制器用于管理应用程序的逻辑。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myController&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 控制器的内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-model</strong>：将表单元素的值与AngularJS模型绑定。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, {{ name }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-repeat</strong>：用于迭代数组或对象，并生成重复的HTML内容。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item in items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-click</strong>：定义点击事件处理程序。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;doSomething()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击我&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-show</strong>和<strong>ng-hide</strong>：根据表达式的值显示或隐藏元素。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isVisible&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这个元素可见&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isHidden&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这个元素隐藏&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-if</strong>：根据表达式的值创建或销毁元素。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shouldDisplay&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;显示这个元素&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-class</strong>：动态设置元素的CSS类。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ &#39;highlight&#39;: isHighlighted, &#39;italic&#39;: isItalic }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;应用CSS类&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-style</strong>：动态设置元素的内联样式。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ &#39;color&#39;: textColor, &#39;font-size&#39;: fontSize }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;应用内联样式&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>ng-submit</strong>：定义表单的提交事件处理程序。 示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submitForm()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 表单内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;提交&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ol><p>这些只是AngularJS中一些常见的指令示例。AngularJS还有许多其他指令，用于处理路由、HTTP请求、过滤器等。要使用这些指令，你需要首先将AngularJS添加到你的项目中，并定义相应的模块和控制器。</p><h2 id="_3-angularjs中的控制器是什么" tabindex="-1">3. AngularJS中的控制器是什么 <a class="header-anchor" href="#_3-angularjs中的控制器是什么" aria-label="Permalink to &quot;3. AngularJS中的控制器是什么&quot;">​</a></h2><p>在AngularJS中，控制器（Controller）是一种JavaScript函数，用于管理视图层的逻辑和数据。控制器的主要作用是将数据绑定到视图并处理用户交互。它们充当了MVC（模型-视图-控制器）架构中的&quot;控制器&quot;部分。</p><p>要将控制器与页面绑定，你需要遵循以下步骤：</p>`,13),E=a(`<li><p><strong>定义控制器</strong>：首先，在AngularJS应用中定义一个控制器。这通常在模块中完成。示例代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">angular.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myApp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyController&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $scope.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello, AngularJS!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><p>在上面的示例中，我们创建了一个名为&quot;MyController&quot;的控制器，并将一个变量<code>message</code>绑定到$scope对象中。</p></li>`,1),g=a(`<p><strong>在HTML中使用ng-controller指令</strong>：在HTML模板中，使用<code>ng-controller</code>指令将控制器与特定的DOM元素关联起来。这样，控制器的作用域将限定在这个DOM元素内部。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myApp&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ng-controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyController&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,2),r=s("code",null,"ng-controller",-1),d=s("code",null,"<div>",-1),o=s("code",null,"message",-1),c=s("strong",null,"数据绑定",-1),y=s("code",null,"ng-model",-1),u=s("code",null,"ng-bind",-1),F=s("code",null,"message",-1),A=s("code",null,"message",-1),v=a(`<p>通过以上步骤，你成功将控制器与页面进行了绑定，使控制器能够管理页面的逻辑和数据。AngularJS的双向数据绑定机制确保了视图和控制器之间的同步，这使得开发更加高效和便捷。</p><h2 id="_4-如何进行数据请求" tabindex="-1">4. 如何进行数据请求 <a class="header-anchor" href="#_4-如何进行数据请求" aria-label="Permalink to &quot;4. 如何进行数据请求&quot;">​</a></h2><p>在AngularJS中进行数据请求通常涉及使用内置的$http服务（或者更现代的$http替代方案，如Axios），它使你能够发送HTTP请求并处理响应。以下是一个基本的数据请求过程的示例：</p><ol><li><strong>引入$http服务</strong>：首先，确保你的AngularJS应用中引入了<code>$http</code>服务，通常在控制器或服务中注入它。例如：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">angular.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myApp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyController&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 控制器代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><ol start="2"><li><strong>发起HTTP请求</strong>：使用<code>$http</code>服务发起HTTP请求，可以使用GET、POST、PUT、DELETE等HTTP方法。以下是一个简单的GET请求的示例：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请求成功时的处理逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $scope.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请求失败时的处理逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请求失败：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><ol start="3"><li><p><strong>处理响应</strong>：使用<code>.then()</code>方法来处理请求成功的情况，通常会将响应数据存储在控制器的作用域中以供视图使用。同时，你也可以使用<code>.catch()</code>方法来处理请求失败的情况。</p></li><li><p><strong>发送带数据的POST请求</strong>：如果需要发送POST请求并包含数据（例如表单数据），你可以这样做：</p></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;john@example.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/submit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, postData)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请求成功时的处理逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请求失败时的处理逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><p>这只是一个非常简单的数据请求示例。在实际应用中，你可能需要更多的错误处理、请求头配置、拦截器等功能，以满足特定的需求。</p><p>另外，AngularJS也支持Promise API，因此你可以使用<code>.then()</code>和<code>.catch()</code>来处理请求的异步结果。要确保请求成功后更新UI，通常需要在<code>.then()</code>块中更新$scope中的数据，从而触发视图的重新渲染。</p><h2 id="_5-angularjs与vue的区别" tabindex="-1">5. Angularjs与vue的区别 <a class="header-anchor" href="#_5-angularjs与vue的区别" aria-label="Permalink to &quot;5. Angularjs与vue的区别&quot;">​</a></h2><p>AngularJS和Vue.js是两种不同的JavaScript前端框架，它们有一些显著的区别，以下是一些主要的区别：</p><ol><li><p>开发公司和历史：</p><ul><li>AngularJS是由Google开发和维护的，于2010年首次发布，是第一个流行的前端框架之一。</li><li>Vue.js是由尤雨溪（Evan You）创建的开源项目，于2014年首次发布，尽管起源相对较晚，但它在开发者社区中迅速赢得了广泛的认可。</li></ul></li><li><p>架构和设计哲学：</p><ul><li>AngularJS采用MVC（Model-View-Controller）架构，使用指令（Directives）来扩展HTML。</li><li>Vue.js采用MVVM（Model-View-ViewModel）架构，通过数据绑定和组件化来实现应用程序的组织。</li></ul></li><li><p>学习曲线：</p><ul><li>AngularJS相对复杂，学习曲线较陡峭，因为它引入了许多概念和概念，如依赖注入、控制器、服务等。</li><li>Vue.js设计简洁，容易上手，因为它的API和概念相对较少，更容易理解。</li></ul></li><li><p>数据绑定：</p><ul><li>AngularJS使用双向数据绑定，这意味着模型（数据）和视图（UI）之间的变化会自动同步。</li><li>Vue.js也支持双向数据绑定，但你可以选择单向数据绑定，使其更灵活。</li></ul></li><li><p>模板语法：</p><ul><li>AngularJS使用类似于标记的模板语法，通过指令来扩展HTML。</li><li>Vue.js使用声明式的模板语法，将模板直接嵌套在HTML中，使得模板更易读。</li></ul></li><li><p>生态系统：</p><ul><li>AngularJS拥有强大的生态系统，包括大量的第三方库和插件，以及广泛的文档。</li><li>Vue.js虽然生态系统相对较小，但也有一些社区维护的插件和工具，文档和社区活跃度不断增加。</li></ul></li><li><p>大规模应用：</p><ul><li>AngularJS在大型企业级应用程序中表现出色，适合复杂的需求。</li><li>Vue.js也可以用于大规模应用程序，但它的轻量性和简单性更适合小型和中型项目。</li></ul></li></ol><p>选择使用AngularJS还是Vue.js取决于你的项目需求、团队的技能和个人偏好。如果你需要更多的控制和功能，以及一个成熟的生态系统，AngularJS可能是一个好的选择。如果你想要一个更轻量级、易于学习和上手的框架，Vue.js可能更适合你。</p>`,15);function C(n,m,_,b,S,D){return h(),p("div",null,[e,s("ol",null,[E,s("li",null,[g,s("p",null,[i("在上面的示例中，"),r,i("指令告诉AngularJS在"),d,i('元素内使用"MyController"控制器的作用域。因此，'),s("code",null,l(n.message),1),i("将显示控制器中定义的"),o,i("变量的值。")])]),s("li",null,[s("p",null,[c,i("：一旦控制器与DOM元素关联，你可以在HTML模板中使用双花括号"),s("code",null,l(),1),i("或其他指令（如"),y,i("、"),u,i("）来将控制器中的数据绑定到视图。这意味着数据的变化将自动反映在视图中，反之亦然。")]),s("p",null,[i("在上面的示例中，"),s("code",null,l(n.message),1),i("用于显示控制器中的"),F,i("变量的值。当控制器中的"),A,i("变量发生变化时，视图中的文本也会相应地更新。")])])]),v])}const J=t(k,[["render",C]]);export{T as __pageData,J as default};
