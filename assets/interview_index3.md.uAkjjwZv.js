import{_ as s,o as i,c as a,R as l,a7 as e}from"./chunks/framework.uQiAom7V.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"interview/index3.md","filePath":"interview/index3.md","lastUpdated":1715148599000}'),n={name:"interview/index3.md"},t=l('<h2 id="一、vue" tabindex="-1">一、Vue <a class="header-anchor" href="#一、vue" aria-label="Permalink to &quot;一、Vue&quot;">​</a></h2><h3 id="_1、vue常用的指令有哪些" tabindex="-1">1、vue常用的指令有哪些 <a class="header-anchor" href="#_1、vue常用的指令有哪些" aria-label="Permalink to &quot;1、vue常用的指令有哪些&quot;">​</a></h3><p>Vue.js提供了一些常用的指令（Directives），用于操作DOM、数据绑定以及控制应用程序的行为。以下是一些常见的Vue指令以及示例：</p><ol><li><p><strong>v-bind</strong>：用于动态绑定HTML元素的属性。</p></li><li><p><strong>v-model</strong>：用于实现双向数据绑定，将表单元素的值与数据模型关联。</p></li><li><p><strong>v-for</strong>：用于循环渲染列表数据。</p></li><li><p><strong>v-if / v-else</strong>：用于条件性地渲染元素。</p></li><li><p><strong>v-show</strong>：类似于v-if，但是通过CSS样式来控制元素的显示和隐藏。</p></li><li><p><strong>v-on</strong>：用于监听DOM事件，并触发相应的方法。</p></li><li><p><strong>v-pre</strong>：跳过元素和其子元素的编译过程，用于静态内容。</p></li><li><p><strong>v-cloak</strong>：用于防止页面闪烁，通常与CSS一起使用。</p></li><li><p><strong>v-once</strong>：只渲染元素和组件一次，不再进行响应式更新。</p></li></ol><p>这些是Vue.js中一些常用的指令。每个指令都有不同的用途，可根据需要选择使用。指令使Vue应用程序更具交互性和动态性，能够根据数据的变化来更新页面内容。</p><h3 id="_2、vue实现双向绑定的原理是什么" tabindex="-1">2、vue实现双向绑定的原理是什么 <a class="header-anchor" href="#_2、vue实现双向绑定的原理是什么" aria-label="Permalink to &quot;2、vue实现双向绑定的原理是什么&quot;">​</a></h3><p>Vue是通过数据劫持（Object.defineProperty）结合发布-订阅模式（Observer和Watcher）来实现响应式数据/双向绑定的。以下是Vue双向绑定的工作原理：</p><p><img src="'+e+`" alt="An image"></p><ol><li><p><strong>数据劫持</strong>：</p><ul><li>Vue会遍历数据对象的每个属性，通过<code>Object.defineProperty</code>方法为每个属性添加<code>getter</code>和<code>setter</code>方法。</li><li>当访问数据属性时，<code>getter</code>方法会被触发，用于收集依赖，将观察者（Watcher）添加到订阅者列表中。</li><li>当修改数据属性时，<code>setter</code>方法会被触发，通知订阅者更新视图。</li></ul></li><li><p><strong>Observer（观察者）</strong>：</p><ul><li>Observer负责监听数据对象，当数据发生变化时，通知订阅者进行更新。</li><li>Observer可以递归地监听嵌套对象的属性，确保整个数据对象都被劫持。</li></ul></li><li><p><strong>Watcher（订阅者）</strong>：</p><ul><li>Watcher订阅数据的变化，每个Watcher实例与一个表达式（通常是模板中的表达式）相关联。</li><li>当数据变化时，Watcher负责更新视图。</li></ul></li><li><p><strong>Dep（依赖管理器）</strong>：</p><ul><li>Dep用于管理Watcher，每个数据属性都有一个对应的Dep实例。</li><li>当数据属性被访问时，Watcher被添加到Dep的订阅者列表中。</li><li>当数据属性被修改时，Dep通知订阅者（Watcher）进行更新。</li></ul></li><li><p><strong>虚拟DOM</strong>：</p><ul><li>Vue使用虚拟DOM来提高性能。当数据发生变化时，Vue首先将变化应用到虚拟DOM上，然后通过比对虚拟DOM和实际DOM的差异，最小化DOM操作，从而提高性能。</li></ul></li></ol><p>通过上述机制，Vue实现了数据变化自动同步到视图，实现了双向绑定。当数据属性发生变化时，会触发setter，setter通知对应的Dep，Dep通知订阅了该数据属性变化的所有Watcher进行视图更新。这样就实现了数据和视图之间的双向绑定，使得应用程序的状态和界面保持同步。</p><h3 id="_3、v-if和v-show的区别" tabindex="-1">3、v-if和v-show的区别 <a class="header-anchor" href="#_3、v-if和v-show的区别" aria-label="Permalink to &quot;3、v-if和v-show的区别&quot;">​</a></h3><p><code>v-if</code> 和 <code>v-show</code> 是 Vue.js 中用于控制元素显示和隐藏的两个指令，它们之间的主要区别在于：</p><ol><li><p><strong>编译时判断 vs. 运行时判断</strong>：</p><ul><li><code>v-if</code>：元素是否被渲染（包括子元素）是在编译阶段进行判断的。如果条件为假，元素及其子元素都不会被渲染到DOM中。</li><li><code>v-show</code>：元素始终会被渲染到DOM中，但是它的 CSS <code>display</code> 属性会在运行时进行切换。如果条件为假，元素的 <code>display</code> 属性会被设置为 <code>none</code>，元素仍然存在于DOM中，只是不可见。</li></ul></li><li><p><strong>性能</strong>：</p><ul><li><code>v-if</code>：适用于在不需要显示的情况下完全删除元素，可以减少 DOM 节点数量，适用于切换频率较低的情况。</li><li><code>v-show</code>：适用于频繁切换显示和隐藏的元素，因为它不会造成元素的重新渲染，但元素始终存在于DOM中。</li></ul></li><li><p><strong>初始化开销</strong>：</p><ul><li><code>v-if</code>：在条件为真时，初始化元素及其子元素的开销较大，因为它们需要在DOM中创建。</li><li><code>v-show</code>：在初始化时，元素及其子元素都会被渲染到DOM中，但它们的 <code>display</code> 属性可能被设置为 <code>none</code>，因此初始化开销相对较小。</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>使用 <code>v-if</code> 当你需要在条件满足时完全添加或删除元素，或者在条件切换频率较低的情况下。</li><li>使用 <code>v-show</code> 当你需要频繁切换元素的可见性而不想造成大量的 DOM 重新渲染，或者在元素的初始状态是可见的情况下。</li></ul></li></ol><p>总之，选择使用 <code>v-if</code> 还是 <code>v-show</code> 取决于具体的需求和性能考虑。如果需要频繁切换可见性并且元素的渲染开销较小，可以考虑使用 <code>v-show</code>。如果在条件不满足时希望彻底删除元素，或者条件切换频率较低，可以使用 <code>v-if</code>。</p><h3 id="_4、data为什么是一个函数" tabindex="-1">4、data为什么是一个函数 <a class="header-anchor" href="#_4、data为什么是一个函数" aria-label="Permalink to &quot;4、data为什么是一个函数&quot;">​</a></h3><p>在Vue.js中，<code>data</code> 选项为函数的原因是为了确保每个组件实例都有自己的数据副本，而不是共享同一个数据对象。</p><p>当 <code>data</code> 是一个对象时，所有组件实例将共享同一个数据对象，这可能会导致意外的数据修改和不可预测的行为。通过将 <code>data</code> 定义为函数，每次创建组件实例时都会调用该函数返回一个新的数据对象，从而确保数据的独立性和组件的可预测性。</p><h3 id="_5、vue生命周期有哪些" tabindex="-1">5、vue生命周期有哪些 <a class="header-anchor" href="#_5、vue生命周期有哪些" aria-label="Permalink to &quot;5、vue生命周期有哪些&quot;">​</a></h3><p>Vue.js组件的生命周期是一系列特定的阶段，它们代表了组件从创建到销毁的整个过程。Vue.js的生命周期包括以下阶段：</p><ol><li><p><strong>创建阶段（Creation）</strong>：</p><ul><li><code>beforeCreate</code>: 组件实例被创建之前，此时组件的选项（如<code>data</code>、<code>methods</code>）还未初始化。</li><li><code>created</code>: 组件实例已经被创建，可以访问<code>data</code>、<code>methods</code>等选项，但DOM元素尚未被挂载。</li></ul></li><li><p><strong>挂载阶段（Mounting）</strong>：</p><ul><li><code>beforeMount</code>: 在模板编译之后，但在DOM元素挂载之前被调用。</li><li><code>mounted</code>: 组件已经挂载到DOM上，此时可以访问DOM元素。通常在这个阶段进行异步操作和数据获取。</li></ul></li><li><p><strong>更新阶段（Updating）</strong>：</p><ul><li><code>beforeUpdate</code>: 数据发生变化，但DOM尚未更新，此时可对数据进行处理。</li><li><code>updated</code>: 数据已经更新，DOM已经重新渲染，此时可以执行DOM操作。</li></ul></li><li><p><strong>销毁阶段（Destruction）</strong>：</p><ul><li><code>beforeDestroy</code>: 在组件销毁之前调用，可以执行一些清理工作。</li><li><code>destroyed</code>: 组件已经销毁，所有事件监听和定时器都已经被移除。</li></ul></li><li><p><strong>错误处理阶段（Error Handling）</strong>（Vue 2.x中的错误处理）：</p><ul><li><code>errorCaptured</code>: 当子组件的一个错误被捕获时触发，用于处理子组件中出现的错误。</li></ul></li></ol><p>这些生命周期钩子允许你在不同的阶段执行代码，以满足组件的需求。例如，在<code>created</code>中初始化数据，<code>mounted</code>中进行DOM操作，<code>beforeDestroy</code>中清理资源等。了解这些生命周期可以帮助你更好地管理和优化Vue组件。</p><ul><li>拓展：<a href="/panda-doc.github.io/note/vue3#组合式api-生命周期函数">vue3生命周期</a></li></ul><h3 id="_6、vue中组件之间是如何通信的" tabindex="-1">6、vue中组件之间是如何通信的 <a class="header-anchor" href="#_6、vue中组件之间是如何通信的" aria-label="Permalink to &quot;6、vue中组件之间是如何通信的&quot;">​</a></h3><p>在Vue中，组件之间可以通过以下方式进行通信：</p><ol><li><p><strong>Props（父子组件通信）</strong>：</p><ul><li>父组件通过属性向子组件传递数据。</li><li>子组件通过props接收父组件传递的数据。</li><li>这是一种单向数据流，父组件向子组件传递数据。</li></ul></li><li><p><strong>自定义事件（子父组件通信）</strong>：</p><ul><li>子组件可以通过<code>$emit</code>方法触发自定义事件，传递数据给父组件。</li><li>父组件可以使用<code>v-on</code>或<code>@</code>监听子组件触发的事件，并在事件处理程序中获取数据。</li><li>这是一种从子组件到父组件的通信方式。</li></ul></li><li><p><strong>Vuex（中央状态管理）</strong>：</p><ul><li>Vuex是Vue的官方状态管理库，用于管理应用中的共享状态。</li><li>组件可以通过dispatch触发action，修改全局的状态。</li><li>其他组件可以通过getter获取全局状态。</li><li>适用于大型应用或需要多个组件之间共享状态的情况。</li></ul></li><li><p><strong>事件总线（非父子组件通信）</strong>：</p><ul><li>通过创建一个事件总线实例，组件可以通过事件总线进行通信。</li><li>一个组件可以触发事件，而其他组件可以监听这些事件并做出响应。</li></ul></li></ol><p>选择通信方式取决于组件之间的关系和需求。一般来说，应该尽量避免直接修改父组件的数据，而是通过props和自定义事件来实现数据的传递和响应。当需要跨越多个组件的通信或全局状态管理时，考虑使用Vuex。</p><ul><li>拓展：<a href="/panda-doc.github.io/project/ggzx/index1#一、vue3组件通信">Vue3事件通信</a></li></ul><h3 id="_7、v-for中key值的作用" tabindex="-1">7、v-for中key值的作用 <a class="header-anchor" href="#_7、v-for中key值的作用" aria-label="Permalink to &quot;7、v-for中key值的作用&quot;">​</a></h3><p><code>v-for</code> 中的 <code>key</code> 属性的作用是帮助 Vue 跟踪每个节点的变化，从而更高效地更新虚拟 DOM。</p><p>通过使用key给每个节点做一个唯一标识，Diff算法就可以正确识别此节点，找到正确的位置插入新的节点。如果没有 <code>key</code>，有可能会出现数据混乱的情况。</p><h3 id="_8、computed-和-watch-的区别" tabindex="-1">8、Computed 和 Watch 的区别 <a class="header-anchor" href="#_8、computed-和-watch-的区别" aria-label="Permalink to &quot;8、Computed 和 Watch 的区别&quot;">​</a></h3><p><code>computed</code>和<code>watch</code>是Vue.js中用于响应数据变化的两种不同方式，它们的主要区别如下：</p><p><strong>Computed（计算属性）</strong>：</p><ol><li><p><strong>自动追踪依赖</strong>：<code>computed</code>属性会自动追踪其依赖的响应式数据，只有依赖数据发生变化时，计算属性才会重新计算。</p></li><li><p><strong>缓存</strong>：计算属性的结果会被缓存起来，只有当依赖发生变化时才会重新计算，多次访问同一计算属性不会重复计算，这有助于提高性能。</p></li><li><p><strong>声明式</strong>：计算属性以声明式的方式定义，类似于普通的对象属性，而不是方法。</p></li><li><p><strong>用于派生数据</strong>：通常用于派生或计算基于已有数据的属性，例如计算总价、过滤数据等。</p></li></ol><p><strong>Watch（监听）</strong>：</p><ol><li><p><strong>手动设置监听</strong>：<code>watch</code>属性允许你手动设置要监听的数据，并在数据变化时执行自定义的回调函数。</p></li><li><p><strong>无缓存</strong>：<code>watch</code>没有缓存机制，每次数据变化都会触发回调函数执行。</p></li><li><p><strong>适用于副作用操作</strong>：常用于需要执行副作用操作的情况，例如异步操作、数据持久化、动画等。</p></li><li><p><strong>更灵活</strong>：相对于计算属性，<code>watch</code>更灵活，因为你可以在回调函数中执行任何操作，不仅限于返回一个计算结果。</p></li></ol><p>在选择使用<code>computed</code>还是<code>watch</code>时，取决于你的需求和具体场景。如果你需要派生数据、自动追踪依赖并且有缓存需求，通常会选择<code>computed</code>。如果需要监听数据变化执行自定义操作或需要更灵活的控制，可以选择<code>watch</code>。有时，你可能会同时使用两者，以满足不同的需求。</p><h3 id="_9、mixin是什么" tabindex="-1">9、Mixin是什么 <a class="header-anchor" href="#_9、mixin是什么" aria-label="Permalink to &quot;9、Mixin是什么&quot;">​</a></h3><p><code>Mixin</code>（混入）是一种在Vue.js中用于共享组件选项的技术。它允许你定义可复用的组件选项，然后将这些选项混入到多个组件中，以实现代码重用和组件配置的共享。</p><p>当一个组件使用了 mixin，它会合并 mixin 中的选项到自身的选项中，从而扩展了组件的功能。如果 mixin 和组件本身具有相同的选项，组件选项会覆盖 mixin 的选项。</p><p>使用Mixin的优点包括：</p><ol><li><p><strong>代码重用</strong>：Mixin 允许你将常用的功能和逻辑抽象为可复用的组件选项，减少了重复编写相似代码的工作。</p></li><li><p><strong>组件配置共享</strong>：多个组件可以共享相同的配置和行为，从而保持一致性。</p></li><li><p><strong>灵活性</strong>：Mixin 可以在不同的组件中组合使用，使你可以根据需要自由组合不同的功能。</p></li><li><p><strong>可维护性</strong>：将相似的功能提取到 Mixin 中，使代码更易于维护和更新。</p></li></ol><p>Mixin 的使用示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个名为 myMixin 的 mixin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myMixin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件中使用 mixin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mixins: [myMixin],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，<code>myMixin</code> 包含了 <code>data</code> 和 <code>methods</code> 选项，然后将它混入了一个组件中。这个组件继承了 <code>myMixin</code> 的 <code>count</code> 数据和 <code>increment</code> 方法。</p><p>需要注意的是，如果 mixin 和组件本身具有相同的选项，组件选项会覆盖 mixin 的选项。如果有冲突，组件选项将具有更高的优先级。</p><p>总之，Mixin 是一种强大的代码复用和组件配置共享机制，可帮助开发者更有效地组织和管理Vue.js应用程序中的代码。</p><h3 id="_10、v-if和v-for为什么不建议一起使用" tabindex="-1">10、v-if和v-for为什么不建议一起使用 <a class="header-anchor" href="#_10、v-if和v-for为什么不建议一起使用" aria-label="Permalink to &quot;10、v-if和v-for为什么不建议一起使用&quot;">​</a></h3><p>在 Vue 中，<code>v-if</code> 和 <code>v-for</code> 可以一起使用，但需要注意一些潜在的问题和注意事项，因为它们在模板中的交互可能会导致一些意外的结果或性能问题。</p><p>主要的问题是：当你同时在同一个元素上使用 <code>v-if</code> 和 <code>v-for</code> 时，<code>v-for</code> 的优先级高于 <code>v-if</code>。这意味着 <code>v-for</code> 会在 <code>v-if</code> 之前执行，这可能导致不必要的渲染或遍历。在某些情况下，这可能会影响性能。</p><p>考虑以下示例：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;li v-for=&quot;item in items&quot; v-if=&quot;item.isActive&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ item.text }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/li&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个示例中，<code>v-for</code> 会对数组 <code>items</code> 进行遍历，但在遍历之后，<code>v-if</code> 才会检查 <code>item.isActive</code> 的条件。这意味着即使 <code>item.isActive</code> 为 <code>false</code>，<code>v-for</code> 也会渲染 <code>&lt;li&gt;</code> 元素，然后通过 <code>v-if</code> 将其隐藏。</p><p>为了解决这个问题，可以考虑使用计算属性或过滤器来筛选数据，而不是在模板中同时使用 <code>v-for</code> 和 <code>v-if</code>。这将确保只有满足条件的数据会被渲染，提高了性能和代码的可读性。</p><p>示例：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;li v-for=&quot;item in filteredItems&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ item.text }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/li&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 在组件中定义计算属性 filteredItems</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">computed: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  filteredItems() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return this.items.filter(item =&gt; item.isActive);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样做可以更有效地筛选数据，并确保只有满足条件的数据被渲染，避免了不必要的渲染和遍历。</p><h3 id="_11、简单谈谈你对vue3-0的理解" tabindex="-1">11、简单谈谈你对vue3.0的理解 <a class="header-anchor" href="#_11、简单谈谈你对vue3-0的理解" aria-label="Permalink to &quot;11、简单谈谈你对vue3.0的理解&quot;">​</a></h3><ol><li>vue3运行速度比vue2快，配合Vite代码编译速度非常快</li><li>vue3使用<code>vue-create</code>或者<code>vite</code>创建项目，而vue2使用<code>vue-cli</code></li><li>数据双向绑定从<code>Object.defineProperty</code>变成了<code>new Proxy</code>，不再使用<code>$set</code>和<code>this</code>了 [ˈprɒksi]</li><li>写法上由选项式API变为组合式API，同时兼容选项式API</li><li>vue3生命周期函数没有<code>beforecreate</code>和<code>created</code>了，改为<code>setup</code>了，其他的生命周期函数在vue2的基础上加了一个on的前缀</li><li>Vue3可以更好的支持<code>TypeScript</code></li></ol><p>在 Vue 3 中，组合式 API 基本上都会配合 <code>&lt;script setup&gt;</code> 语法在单文件组件中使用。下面是一个使用组合式 API 的组件示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { ref, onMounted } from &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 响应式状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const count = ref(0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 更改状态、触发更新的函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">function increment() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 生命周期钩子</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onMounted(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`计数器初始值为 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}。\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @click=&quot;increment&quot;&gt;点击了：{{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> count</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> }}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 次&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;/template&gt;</span></span></code></pre></div><h2 id="二、vuerouter-vuex" tabindex="-1">二、VueRouter&amp;Vuex <a class="header-anchor" href="#二、vuerouter-vuex" aria-label="Permalink to &quot;二、VueRouter&amp;Vuex&quot;">​</a></h2><h3 id="_1、路由传递参数的方式" tabindex="-1">1、路由传递参数的方式 <a class="header-anchor" href="#_1、路由传递参数的方式" aria-label="Permalink to &quot;1、路由传递参数的方式&quot;">​</a></h3><p>在Vue.js的路由中，你可以使用多种方法传递参数给路由，并在目标路由组件中获取这些参数。以下是传递参数和获取参数的方法：</p><p><strong>传递参数的方法</strong>：</p><ol><li><p><strong>路由动态参数（Dynamic Route Parameters）</strong>：</p><ul><li><p>在路由配置中使用占位符来定义路由参数，例如：<code>/user/:userId</code>。</p></li><li><p>在路由链接或编程式导航时，通过<code>params</code>属性传递参数。</p></li><li><p>示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ name: &#39;user&#39;, params: { userId: 123 }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;User&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>或</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params: { userId: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }})</span></span></code></pre></div></li></ul></li><li><p><strong>查询参数（Query Parameters）</strong>：</p><ul><li><p>在URL中使用查询参数传递数据，例如：<code>/user?userId=123</code>。</p></li><li><p>通过<code>query</code>属性传递参数。</p></li><li><p>示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ name: &#39;user&#39;, query: { userId: 123 }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;User&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>或</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, query: { userId: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }})</span></span></code></pre></div></li></ul></li><li><p><strong>路由元信息（Route Meta Fields）</strong>：</p><ul><li>在路由配置中使用<code>meta</code>字段来定义元信息，然后将数据存储在元信息中，供路由组件访问。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路由配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: User, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span></code></pre></div></li></ul></li></ol><p><strong>获取参数的方法</strong>：</p><ol><li><p><strong>通过<code>$route</code>对象获取路由参数</strong>：</p><ul><li>在路由组件中，你可以通过<code>this.$route.params</code>来访问路由参数。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在路由组件中获取路由参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.params.userId</span></span></code></pre></div></li></ul></li><li><p><strong>通过<code>$route</code>对象获取查询参数</strong>：</p><ul><li>如果你使用了查询参数，可以通过<code>this.$route.query</code>来访问查询参数。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在路由组件中获取查询参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.query.userId</span></span></code></pre></div></li></ul></li><li><p><strong>通过<code>$route</code>对象获取路由元信息</strong>：</p><ul><li>如果参数存储在路由元信息中，你可以通过<code>this.$route.meta</code>来访问元信息中的参数。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在路由组件中获取路由元信息中的参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.meta.userId</span></span></code></pre></div></li></ul></li></ol><p>这些方法允许你在Vue路由中传递和获取参数，具体的选择取决于你的应用程序的需求和设计。路由参数通常用于表示资源的标识符，查询参数通常用于过滤、排序或其他操作，而路由元信息通常用于存储与路由相关的数据。</p><h3 id="_2、路由守卫有哪些" tabindex="-1">2、路由守卫有哪些 <a class="header-anchor" href="#_2、路由守卫有哪些" aria-label="Permalink to &quot;2、路由守卫有哪些&quot;">​</a></h3><p>Vue Router提供了一系列的路由守卫，用于在导航过程中控制路由的行为。这些路由守卫包括以下几种：</p><ol><li><p><strong>全局前置守卫（Global Before Guards）</strong>：</p><ul><li><code>beforeEach(to, from, next)</code>：在每次路由跳转前调用，用于全局的导航守卫。</li><li><code>beforeResolve(to, from, next)</code>：在导航被确认之前，同时在所有组件被解析之后调用。</li></ul></li><li><p><strong>路由独享守卫（Per-Route Guard）</strong>：</p><ul><li><code>beforeEnter(to, from, next)</code>：在单个路由配置中定义的守卫，仅适用于该路由。</li></ul></li><li><p><strong>组件内守卫（In-Component Guard）</strong>：</p><ul><li><code>beforeRouteEnter(to, from, next)</code>：在路由进入该组件前调用，不能访问<code>this</code>上下文，但可以通过<code>next</code>回调访问组件实例。</li><li><code>beforeRouteUpdate(to, from, next)</code>：在当前路由改变，但该组件被复用时调用，也不能访问<code>this</code>上下文。</li><li><code>beforeRouteLeave(to, from, next)</code>：在路由离开该组件时调用，用于阻止离开或确认是否离开。</li></ul></li></ol><p>这些路由守卫的作用包括：</p><ul><li><strong>全局前置守卫</strong>用于全局的导航守卫，可以用于验证用户身份、权限等。</li><li><strong>路由独享守卫</strong>用于单个路由配置中，可以用于特定路由的验证。</li><li><strong>组件内守卫</strong>用于在组件内部进行特定路由的验证，例如在进入组件前验证数据加载。</li></ul><p>通过使用这些路由守卫，你可以实现诸如身份验证、权限控制、数据加载、页面跳转等各种导航控制逻辑，以满足应用程序的需求。每个守卫都有其特定的用途和时机，允许你对路由的各个方面进行精细的控制。</p><h3 id="_3、hash和history模式的区别" tabindex="-1">3、hash和history模式的区别 <a class="header-anchor" href="#_3、hash和history模式的区别" aria-label="Permalink to &quot;3、hash和history模式的区别&quot;">​</a></h3><p>Vue Router支持两种路由模式：Hash 模式（Hash Mode）和 History 模式（History Mode）。它们之间的主要区别在于 URL 的显示方式和对浏览器的兼容性。</p><ol><li><p><strong>Hash 模式</strong>：</p><ul><li>URL 格式：<code>http://example.com/#/your-route</code></li><li>使用 <code>#</code> 符号来分隔基础 URL 和路由路径。</li><li>在不支持 HTML5 History API 的老旧浏览器中也能正常工作，因为路由信息存储在 URL 的哈希部分，不会导致页面刷新。</li><li>好处是兼容性好，可以在大多数环境中使用。</li><li>缺点是 URL 显示不够友好，且带有 <code>#</code> 符号。</li></ul></li><li><p><strong>History 模式</strong>：</p><ul><li>URL 格式：<code>http://example.com/your-route</code></li><li>使用 HTML5 History API，不带 <code>#</code> 符号。</li><li>URL 显示更友好，更类似传统网站的 URL。</li><li>需要服务器端配置以支持在路由路径上的刷新，否则会导致404错误。</li><li>不支持HTML5 History API的老浏览器可能无法正常工作。</li></ul></li></ol><p>选择使用哪种路由模式取决于项目的需求和对浏览器兼容性的要求。如果需要在老浏览器中使用或不想进行服务器配置，可以选择 Hash 模式。如果希望URL更友好，并且可以在支持HTML5 History API的环境中工作，可以选择 History 模式。</p><p>在Vue Router中，你可以使用以下方式来配置路由模式：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用History模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>或者使用 Hash 模式：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Hash模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>无论你选择哪种模式，Vue Router都会提供相应的路由功能来管理你的应用程序的导航。</p><h3 id="_4、-router和-route的区别" tabindex="-1">4、$router和$route的区别 <a class="header-anchor" href="#_4、-router和-route的区别" aria-label="Permalink to &quot;4、$router和$route的区别&quot;">​</a></h3><p>在 Vue Router 中，<code>$router</code> 和 <code>$route</code> 都是与路由相关的属性，但它们有不同的作用和用法：</p><ol><li><strong>$router</strong>： <ul><li><code>$router</code> 是 Vue Router 的路由实例，它提供了导航和路由跳转的方法。</li><li>通过 <code>$router</code>，你可以访问诸如 <code>push</code>、<code>replace</code>、<code>go</code> 等方法，用于在不同路由之间进行导航。</li><li><code>$router</code> 还提供了路由信息，包括当前的路由路径、参数、查询参数等。</li><li>通常在组件中通过 <code>this.$router</code> 来访问路由实例。</li></ul></li></ol><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件中使用 $router</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  goToAboutPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li><strong>$route</strong>： <ul><li><code>$route</code> 是当前活动路由的路由信息对象，它包含了当前路由的各种属性，如路径、参数、查询参数、哈希值等。</li><li>通过 <code>$route</code>，你可以访问当前路由的信息，以便在组件中根据路由信息进行逻辑处理。</li><li><code>$route</code> 是只读的，不能用于导航，只用于获取当前路由的信息。</li><li>通常在组件中通过 <code>this.$route</code> 来访问当前路由信息。</li></ul></li></ol><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件中使用 $route</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  currentRouteInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.path; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前路由的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>总结：</p><ul><li><code>$router</code> 是路由实例，用于路由导航和跳转。</li><li><code>$route</code> 是当前活动路由的信息对象，用于获取当前路由的各种属性。</li></ul><h3 id="_5、vuex是什么" tabindex="-1">5、Vuex是什么？ <a class="header-anchor" href="#_5、vuex是什么" aria-label="Permalink to &quot;5、Vuex是什么？&quot;">​</a></h3><p>Vuex是一个用于Vue.js应用程序的状态管理库，它用于管理和共享应用程序中的数据状态。Vuex的主要目的是解决Vue组件之间共享数据、状态管理和通信的复杂性，特别是在大型单页应用中。</p><p>Vuex的核心概念包括：</p><ol><li><p><strong>State（状态）</strong>：应用程序中的数据状态，以对象的形式存储。所有需要共享的数据都存储在state中。</p></li><li><p><strong>Mutation（变更）</strong>：用于修改状态的方法，通常是同步的。Mutations是唯一允许修改state的地方。</p></li><li><p><strong>Action（动作）</strong>：用于触发异步操作和提交Mutations，它们可以包含业务逻辑、数据获取等操作。</p></li><li><p><strong>Getter（获取器）</strong>：用于从state中派生数据，可以像计算属性一样使用。</p></li><li><p><strong>Module（模块）</strong>：用于将store拆分成多个模块，每个模块可以拥有自己的state、mutations、actions等。</p></li></ol><p>要修改状态，你通常会使用mutations或actions，具体取决于操作的同步或异步性质。下面是如何使用mutations和actions来修改状态的示例：</p><p><strong>使用mutations修改状态</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义mutation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mutations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  decrement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件中提交mutation</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;increment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>使用actions修改状态</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义action</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> actions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchDataFromServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setError&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error.message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件中分发action</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fetchData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>在上述示例中，mutations用于同步操作，而actions用于处理异步操作。通过提交mutation或分发action，你可以修改Vuex中的状态数据。</p><ul><li>拓展：<a href="/panda-doc.github.io/project/ggzx/index1#_1-8-pinia">pinia用法</a></li></ul><h2 id="三、微信小程序" tabindex="-1">三、微信小程序 <a class="header-anchor" href="#三、微信小程序" aria-label="Permalink to &quot;三、微信小程序&quot;">​</a></h2><h3 id="_1、简述一下微信小程序的文件类型" tabindex="-1">1、简述一下微信小程序的文件类型 <a class="header-anchor" href="#_1、简述一下微信小程序的文件类型" aria-label="Permalink to &quot;1、简述一下微信小程序的文件类型&quot;">​</a></h3><p>微信小程序包含多种类型的文件，每种文件类型在小程序的开发和运行过程中有不同的用途和限制。以下是微信小程序的主要文件类型：</p><ol><li><p><strong>JSON 文件</strong>：</p><ul><li><code>.json</code> 文件用于配置小程序的全局配置信息，如页面路径、窗口设置、导航栏样式等。</li><li><code>app.json</code> 是小程序的全局配置文件，每个小程序至少有一个。</li><li>页面配置文件（如<code>page.json</code>）可以单独配置某个页面的特定属性。</li></ul></li><li><p><strong>WXML 文件</strong>：</p><ul><li><code>.wxml</code> 文件用于编写小程序的页面结构，类似于HTML。</li><li>WXML 支持数据绑定、条件渲染、列表渲染等功能。</li></ul></li><li><p><strong>WXSS 文件</strong>：</p><ul><li><code>.wxss</code> 文件用于编写小程序的页面样式，类似于CSS。</li><li>WXSS 支持类似 CSS 的选择器和属性，但也有一些微信小程序特定的样式语法。</li></ul></li><li><p><strong>JS 文件</strong>：</p><ul><li><code>.js</code> 文件用于编写小程序的逻辑层代码，包括页面的交互逻辑、数据处理等。</li><li>小程序中的 JavaScript 代码遵循 CommonJS 规范，可以使用 <code>require()</code> 导入模块。</li></ul></li><li><p><strong>WXS 文件</strong>：</p><ul><li><code>.wxs</code> 文件是小程序的模块脚本文件，用于处理一些复杂的逻辑和计算，类似于 JavaScript。</li><li>WXS 代码在运行时独立于页面的事件处理函数运行，可以提高性能。</li></ul></li></ol><p>小程序的文件类型和规范可以根据开发需要逐一了解和使用。不同文件类型有不同的用途和约束，开发者需要遵守微信小程序的文件命名规则和目录结构要求。</p><h3 id="_2、小程序的生命周期函数" tabindex="-1">2、小程序的生命周期函数 <a class="header-anchor" href="#_2、小程序的生命周期函数" aria-label="Permalink to &quot;2、小程序的生命周期函数&quot;">​</a></h3><p>微信小程序有一系列生命周期函数，它们用于管理小程序的生命周期事件，允许开发者在不同阶段执行特定的逻辑。以下是主要的小程序生命周期函数：</p><ul><li><code>onLoad()</code> 页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数</li><li><code>onShow()</code> 页面显示/切入前台时触发。</li><li><code>onReady()</code> 页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互</li><li><code>onHide()</code> 页面隐藏/切入后台时触发。 如 navigateTo 或底部 tab 切换到其他页面，小程序切入后台等</li><li><code>onUnload()</code> 页面卸载时触发。如 redirectTo 或 navigateBack 到其他页面时</li></ul><h3 id="_3、列举微信小程序常用组件和api函数" tabindex="-1">3、列举微信小程序常用组件和api函数 <a class="header-anchor" href="#_3、列举微信小程序常用组件和api函数" aria-label="Permalink to &quot;3、列举微信小程序常用组件和api函数&quot;">​</a></h3><p>以下是微信小程序中常用的5个组件和5个API函数：</p><p>常用组件：</p><ol><li><p><strong><code>&lt;view&gt;</code> 组件</strong>：</p><ul><li><code>&lt;view&gt;</code> 组件用于创建一个视图容器，可以包含其他组件和文本。</li><li>它类似于HTML中的 <code>&lt;div&gt;</code>，用于布局和样式控制。</li></ul></li><li><p><strong><code>&lt;text&gt;</code> 组件</strong>：</p><ul><li><code>&lt;text&gt;</code> 组件用于显示文本内容，支持文本样式设置。</li><li>可以用于显示静态文本或动态文本内容。</li></ul></li><li><p><strong><code>&lt;button&gt;</code> 组件</strong>：</p><ul><li><code>&lt;button&gt;</code> 组件用于创建按钮，用户可以点击来触发事件。</li><li>可以通过绑定事件监听器实现按钮的交互功能。</li></ul></li><li><p><strong><code>&lt;image&gt;</code> 组件</strong>：</p><ul><li><code>&lt;image&gt;</code> 组件用于显示图片，支持本地图片和网络图片。</li><li>可以用于显示头像、图标、广告等图片内容。</li></ul></li><li><p><strong><code>&lt;input&gt;</code> 组件</strong>：</p><ul><li><code>&lt;input&gt;</code> 组件用于创建输入框，允许用户输入文本。</li><li>可以通过监听输入事件来获取用户输入的内容。</li></ul></li></ol><p>常用API函数：</p><ol><li><p><strong><code>wx.navigateTo</code></strong>：</p><ul><li><code>wx.navigateTo</code> 用于页面跳转，将页面入栈到页面栈中。</li><li>可以用于实现页面之间的导航。</li></ul></li><li><p><strong><code>wx.request</code></strong>：</p><ul><li><code>wx.request</code> 用于发送网络请求，支持GET、POST等HTTP请求方式。</li><li>可以用于获取远程数据，如接口数据或JSON数据。</li></ul></li><li><p><strong><code>wx.showToast</code></strong>：</p><ul><li><code>wx.showToast</code> 用于显示轻量级的提示框，如成功提示、错误提示等。</li><li>可以用于给用户反馈信息。</li></ul></li><li><p><strong><code>wx.getStorageSync</code></strong>：</p><ul><li><code>wx.getStorageSync</code> 用于同步获取本地缓存的数据。</li><li>可以用于存储和读取小程序的本地数据。</li></ul></li><li><p><strong><code>wx.getLocation</code></strong>：</p><ul><li><code>wx.getLocation</code> 用于获取用户的地理位置信息。</li><li>可以用于实现位置相关的功能，如地图、附近的店铺等。</li></ul></li></ol><p>这些组件和API函数是微信小程序开发中经常使用的一些基本元素，用于构建小程序界面和实现功能。开发者可以根据具体的需求和场景来选择合适的组件和API函数。</p><h3 id="_4、小程序页面间有哪些传递数据的方法" tabindex="-1">4、小程序页面间有哪些传递数据的方法? <a class="header-anchor" href="#_4、小程序页面间有哪些传递数据的方法" aria-label="Permalink to &quot;4、小程序页面间有哪些传递数据的方法?&quot;">​</a></h3><ul><li>使用全局变量实现数据传递</li></ul><p>在 app.js 文件中定义全局变量 <code>globalData</code>， 将需要存储的信息存放在里面</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 全局变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  globalData: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userInfo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p>使用的时候，直接使用 getApp() 拿到存储的信息</p></blockquote><ul><li>传参</li></ul><p>使用 <code>wx.navigateTo</code> 与 <code>wx.redirectTo</code> 的时候，可以将部分数据放在 url 里面，并在新页面 onLoad 的时候初始化</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Navigate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../pageD/pageD?name=raymond&amp;gender=male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Redirect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirectTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../pageD/pageD?name=raymond&amp;gender=male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pageB.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(option.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;is&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> option.gender)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      option: option</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p>需要注意的问题：wx.navigateTo 和 wx.redirectTo 不允许跳转到 tab 所包含的页面，onLoad 只执行一次</p></blockquote><ul><li>使用本地缓存</li></ul><h3 id="_5、如何优化首次加载小程序的速度" tabindex="-1">5、如何优化首次加载小程序的速度？ <a class="header-anchor" href="#_5、如何优化首次加载小程序的速度" aria-label="Permalink to &quot;5、如何优化首次加载小程序的速度？&quot;">​</a></h3><ol><li>包体积优化</li></ol><ul><li>分包加载（优先采用，大幅降低主包体积）。</li><li>图片优化（1.使用tinypng压缩图片素材； 2.服务器端支持，可采用webp格式）。</li><li>组件化开发（易维护）。</li><li>减少文件个数及冗余数据。</li></ul><ol start="2"><li>请求优化</li></ol><ul><li>关键数据尽早请求(onLoad()阶段请求,次要数据可以通过事件触发再请求)；整合请求数据，降低请求次数。</li><li>采用cdn缓存静态的接口数据（如判断用户登录状态，未登录则请求缓存接口数据），cdn稳定且就近访问速度快（针对加载总时长波动大）。 缓存请求的接口数据。</li></ul><ol start="3"><li>首次渲染优化</li></ol><ul><li>图片懒加载（节省带宽）。</li><li>setData优化（不要一次性设置过多的数据等）。</li><li>DOM渲染优化（减少DOM节点）</li></ul><h3 id="_6、拓展" tabindex="-1">6、拓展 <a class="header-anchor" href="#_6、拓展" aria-label="Permalink to &quot;6、拓展&quot;">​</a></h3><ul><li>详见 <a href="/panda-doc.github.io/interview/index5#三、小程序面试题">小程序面试题</a></li></ul>`,139),p=[t];function h(o,k,r,d,c,E){return i(),a("div",null,p)}const y=s(n,[["render",h]]);export{u as __pageData,y as default};
