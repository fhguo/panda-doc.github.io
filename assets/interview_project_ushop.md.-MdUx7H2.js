import{_ as s,o as a,c as i,R as t,aj as n,ak as e,al as l,am as h}from"./chunks/framework.uQiAom7V.js";const _=JSON.parse('{"title":"小U智选","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"interview/project/ushop.md","filePath":"interview/project/ushop.md","lastUpdated":1715148599000}'),p={name:"interview/project/ushop.md"},r=t('<h1 id="小u智选" tabindex="-1">小U智选 <a class="header-anchor" href="#小u智选" aria-label="Permalink to &quot;小U智选&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">项目概述</p><ul><li>小U智选基于 uniapp 开发的微信小程序商城项目，拥有首页(home)、分类(cate)、购物车(cart)、我的(my) 这 4 个 tabBar 页面，此外还有商品列表页、搜索页、商品详情页、个人中心等多个页面，包含挑选商品、加入购物车、生成订单、微信支付整个购物流程。</li><li>该项目使用Vue全家桶+uni-ui组件库，使用HBuilderX开发，在微信开发者工具上实时预览。</li></ul></div><h2 id="一、项目截图" tabindex="-1">一、项目截图 <a class="header-anchor" href="#一、项目截图" aria-label="Permalink to &quot;一、项目截图&quot;">​</a></h2><h3 id="_1-首页" tabindex="-1">1. 首页 <a class="header-anchor" href="#_1-首页" aria-label="Permalink to &quot;1. 首页&quot;">​</a></h3><p><img src="'+n+'" alt="An image"></p><h3 id="_2-分类" tabindex="-1">2. 分类 <a class="header-anchor" href="#_2-分类" aria-label="Permalink to &quot;2. 分类&quot;">​</a></h3><p><img src="'+e+'" alt="An image"></p><h3 id="_3-购物车" tabindex="-1">3. 购物车 <a class="header-anchor" href="#_3-购物车" aria-label="Permalink to &quot;3. 购物车&quot;">​</a></h3><p><img src="'+l+'" alt="An image"></p><h3 id="_4-我的" tabindex="-1">4. 我的 <a class="header-anchor" href="#_4-我的" aria-label="Permalink to &quot;4. 我的&quot;">​</a></h3><p><img src="'+h+`" alt="An image"></p><h2 id="二、重难点" tabindex="-1">二、重难点 <a class="header-anchor" href="#二、重难点" aria-label="Permalink to &quot;二、重难点&quot;">​</a></h2><h3 id="_1、微信支付的流程" tabindex="-1">1、微信支付的流程 <a class="header-anchor" href="#_1、微信支付的流程" aria-label="Permalink to &quot;1、微信支付的流程&quot;">​</a></h3><p><strong>创建订单</strong></p><p>请求创建订单的 API 接口：把（订单金额、收货地址、订单中包含的商品信息）发送到服务器</p><p>服务器响应的结果：订单编号</p><p><strong>订单预支付</strong></p><p>请求订单预支付的 API 接口：把（订单编号）发送到服务器</p><p>服务器响应的结果：订单预支付的参数对象，里面包含了订单支付相关的必要参数</p><p><strong>发起微信支付</strong></p><ul><li>调用 <code>uni.requestPayment()</code> 这个 API，发起微信支付；</li><li>把步骤 2 得到的 “订单预支付对象” 作为参数传递给 <code>uni.requestPayment()</code> 方法</li><li>监听 <code>uni.requestPayment()</code> 这个 API 的 success，fail，complete 回调函数</li></ul><h3 id="_2、实现搜索框的防抖处理" tabindex="-1">2、实现搜索框的防抖处理 <a class="header-anchor" href="#_2、实现搜索框的防抖处理" aria-label="Permalink to &quot;2、实现搜索框的防抖处理&quot;">​</a></h3><ul><li>在 data 中定义防抖的延时器 timerId 如下：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 延时器的 timerId</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 搜索关键词</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kw: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>修改 input 事件处理函数如下：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 清除 timer 对应的延时器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timer)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 重新启动一个延时器，并把 timerId 赋值给 this.timer</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果 500 毫秒内，没有触发新的输入事件，则为搜索关键词赋值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.kw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.kw)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3、其它" tabindex="-1">3、其它 <a class="header-anchor" href="#_3、其它" aria-label="Permalink to &quot;3、其它&quot;">​</a></h3><p>参见 <a href="http://applet-base-api-t.itheima.net/docs-uni-shop/index.htm" target="_blank" rel="noreferrer">黑马优购</a></p>`,28),k=[r];function d(o,c,E,g,u,m){return a(),i("div",null,k)}const b=s(p,[["render",d]]);export{_ as __pageData,b as default};
